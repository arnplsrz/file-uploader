// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folder Folder[]
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  openedAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Prisma's docs for self-relation
  // https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations
  parentId  String?
  parent    Folder?  @relation("Subfolder", fields: [parentId], references: [id], onDelete: Cascade)
  subfolder Folder[] @relation("Subfolder")

  files File[]

  @@unique([userId, path])
  @@index([userId], type: Hash)
  @@index([parentId], type: Hash)
}

model File {
  id        String   @id @default(cuid())
  name      String
  size      Int
  type      String?
  path      String
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([folderId], type: Hash)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
